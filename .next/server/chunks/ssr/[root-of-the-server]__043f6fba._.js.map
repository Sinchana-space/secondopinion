{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///D:/secop2/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///D:/secop2/src/ai/flows/generate-case-summary.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview AI flow to generate a case summary from a prescription image.\r\n *\r\n * - generateCaseSummary - A function that handles the case summary generation process.\r\n * - GenerateCaseSummaryInput - The input type for the generateCaseSummary function.\r\n * - GenerateCaseSummaryOutput - The return type for the generateCaseSummary function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateCaseSummaryInputSchema = z.object({\r\n  prescriptionPhotoDataUri: z\r\n    .string()\r\n    .describe(\r\n      'A photo of a prescription, as a data URI that must include a MIME type and use Base64 encoding. Expected format: data:<mimetype>;base64,<encoded_data>.'\r\n    ),\r\n});\r\nexport type GenerateCaseSummaryInput = z.infer<typeof GenerateCaseSummaryInputSchema>;\r\n\r\nconst GenerateCaseSummaryOutputSchema = z.object({\r\n  caseSummary: z.string().describe('A summary of the medication, dosage, and potential side effects.'),\r\n  disease: z.string().describe('The likely disease or condition based on the prescription.'),\r\n  likelihood: z.string().describe('The likelihood of the diagnosis (e.g., High, Medium, Low).'),\r\n  patientInfo: z.string().describe('Information and next steps for the patient regarding the potential diagnosis.'),\r\n});\r\nexport type GenerateCaseSummaryOutput = z.infer<typeof GenerateCaseSummaryOutputSchema>;\r\n\r\nexport async function generateCaseSummary(input: GenerateCaseSummaryInput): Promise<GenerateCaseSummaryOutput> {\r\n  return generateCaseSummaryFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateCaseSummaryPrompt',\r\n  input: {schema: GenerateCaseSummaryInputSchema},\r\n  output: {schema: GenerateCaseSummaryOutputSchema},\r\n  prompt: `You are a medical expert. You will analyze a prescription and do the following:\r\n  1.  Summarize the medication, dosage, and potential side effects for the patient in a way that's easy to understand.\r\n  2.  Based on the medication, infer the likely disease or condition it is meant to treat.\r\n  3.  State the likelihood (High, Medium, or Low) that this is the correct diagnosis.\r\n  4.  Provide helpful information and suggest next steps for a patient with this condition.\r\n\r\nPrescription Photo: {{media url=prescriptionPhotoDataUri}}`,\r\n});\r\n\r\nconst generateCaseSummaryFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateCaseSummaryFlow',\r\n    inputSchema: GenerateCaseSummaryInputSchema,\r\n    outputSchema: GenerateCaseSummaryOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,0BAA0B,uIAAA,CAAA,IAAC,CACxB,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;0DAM+C,CAAC;AAC3D;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA1BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///D:/secop2/.next-internal/server/app/%28ai%29/diagnosis/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateCaseSummary as '40335d41b74d3487e17396105ce77f36a1b8532077'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file:///D:/secop2/src/app/%28ai%29/diagnosis/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(ai)/diagnosis/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(ai)/diagnosis/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///D:/secop2/src/app/%28ai%29/diagnosis/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(ai)/diagnosis/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(ai)/diagnosis/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}